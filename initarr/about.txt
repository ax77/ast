// I)
/////////////////////////////////////////////////////////////////////
//
//  int arr[][2][2] = { {{1,2},3,4},{5},6 }; // x?==3
//  arr.2.0:
//    .long   1
//    .long   2
//    .long   3
//    .long   4
//---
//    .long   5
//    .long   0
//    .long   0
//    .long   0
//---
//    .long   6
//    .long   0
//    .long   0
//    .long   0

mdeep = 2
mlen  = 2*2=4

    block #1: 1,2,3,4 ==> deep ok, len ok
    block #2: 5       ==> deep ok, len ok
    get '6'           ==> is not in block, create new one, and push
    stop. check all, and fill rest with zero


// II)
/////////////////////////////////////////////////////////////////////
//
//  int arr[][2] = { {1}, {2}, 3,4,5,6,7 }; // x?==5
//  arr.2.0:
//    .long   1
//    .long   0
//---
//    .long   2
//    .long   0
//---
//    .long   3
//    .long   4
//---
//    .long   5
//    .long   6
//---
//    .long   7
//    .long   0

mdeep = 1
mlen  = 2

    block #1: 1 ==> deep ok, len ok
    block #2: 2 ==> deep ok, len ok
    get '3'     ==> is not in block, check last avail, is not(no elements at all), create new one array, and push
    get '4'     ==> is not in block, check last avail, yes, push in last
    get '5'     ==> is not in block, check last avail, is not(3,4), create new one arr, and push
    get '6'     ==> is not in block, check last avail, yes, push in last
    get '7'     ==> is not in block, check last avail, is not(5,6), create new one arr, and push
    stop. check all, and fill rest with zero
    
    
// III)
/////////////////////////////////////////////////////////////////////
//
//  int arr[][2][3] = { {{1}}, {{2, 3}}, 4,5,6,7, };
//  arr.2.0:
//          .long   1
//          .long   0
//          .long   0
//          .long   0
//          .long   0
//          .long   0
//
//          .long   2
//          .long   3
//          .long   0
//          .long   0
//          .long   0
//          .long   0
//
//          .long   4
//          .long   5
//          .long   6
//          .long   7
//          .long   0
//          .long   0

mdeep = 2
mlen  = 2*3=6

    block #1: 1   ==> deep ok, len ok
    block #2: 2,3 ==> deep ok, len ok
    get '4'     ==> is not in block, check last avail, is not(no elements at all), create new one array, and push
    get '5'     ==> is not in block, check last avail, yes, push in last
    get '6'     ==> is not in block, check last avail, yes, push in last
    get '7'     ==> is not in block, check last avail, yes, push in last
    stop. check all, and fill rest with zero












